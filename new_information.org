1. ORF cannot overlap. So start from the occurance of a start codon and ignore all the start codons in between till a stop codon is reached. 
2. Logically thinking, probability of a large sequence (say, >5nt) occuring purely by chance at random in a DNA sequence in very slim. Thus, if they are occuring two or more times, then they must be biologically relavant, and most probably they are repeats.
   
   Thus, for the repeats problem, we take this approach: 
   1. first look at how many times a *given repeat unit* occurs in a file and return a value =get_repeat_times(repeat_unit)= 
   2. Then use another function to *extract all unique units of length n* from a file and return a list =get_repeat_units(sequence, n)=
   3. A function =get_seq_repeat_info(sequence, n)= will get the unit list from =get_repeat_times(sequence, n)= and pass individual units to the =get_repeat_times(unit)= to return a dictionary containing, for that sequence:
      #+begin_src python
        sequence_repeats_dict = {unit_1:times, ..., unit_n:times}
      #+end_src
      
   4. Now to scale this up to a file:
      A dictionary will be mainatained:
        #+begin_src python
          file_repeat_info = {
              sequence_ID_1:{
                  repeat_unit_1:times_repeated,
                  .
                  .
                  ., 
                  repeat_unit_n:times_repeated},
              .
              .
              .,
              sequence_ID_n:{
                  repeat_unit_1:times_repeated,
                  .
                  .
                  ., 
                  repeat_unit_n:times_repeated}}
    
        #+end_src
        
      1) A function =get_file_repeat_units(fasta_dictionary, n)= accepts a FASTA parsed dictionary and and a unit length n and gets the =file_repeat_info= dictionary containing repeat information (of length n) corresponding to all sequence IDs in the file, by calling the =get_seq_repeat_info(sequence)= for all sequences.

         Now it needs to find the total the occurances of all unique sequences in the file. The strategy for this could be:
         Go over the =file_repeat_info= obtained to store in a dictionary all the unique repeats.

         Finally it returns the occurance of all unique repeat units in the file. 
         This amounts to: 
            #+begin_src python
              def get_file_repeat_units(fasta_dict, n):
                  file_repeat_info = {}
                  for uid, sequence in fasta_dict.items():
                      file_repeat_info[uid] = get_seq_repeat_info(sequence, n)

                  #dictionary to store the times of occurance of each unique repeat unit in the file 
                  file_units_times_dict = {}
                  #to help us keep track of the unique repeat units
                  unit_list = []
                  for uid, sequence_repeat_info in file_repeat_info.items():
                      for repeat_unit, times in sequence_repeat_info.items():
                          if repeat_unit in unit_list:
                              file_unit_times_dict[repeat_unit] = file_unit_times[repeat_unit] + times
                          else:
                              file_unit_times_dict[repeat_unit] = times
                              unit_list.append(repeat_unit)

                  return file_unit_times_dict
            #+end_src

      2) Now another function =max_occurance_n(fasta_dict, n)= will compare all the unique repeat units of length n and return the unit(s) with the max occurance and the number of times it has occured, in a list of type:

         #+begin_src python
         max_repeats_list = [max_times, repeat_unit_1, ..., repeat_unit_n]
         #+end_src

         Thus we build the function as: 
         #+begin_src python
           def max_occurance_n(fasta_dict, n):
               """This function returns the unit(s) with the maximum occurance with the number of times it occured."""

               repeat_units_dict = get_file_repeat_units(fasta_dict, n)
               max_times = 0
    
               for repeat_unit, times in repeat_units_dict.items():
                   if times > max_times:
                       max_times = times

               #now we build the max_repeats list. A list is used here because there can be more than one repeat unit with the maximum occurance
               max_repeats_list = []
               #we assign the first position of the max_repeats_list with the max time of occurance 
               max_repeats_list[0] = max_times
               for repeat_unit, times in repeat_units_dict.items():
                   if times == max_times:
                       max_repeats_list.append(repeat_unit)

               return max_repeats_list
         #+end_src

      3) Another side quest is to find for a file the maximum number of times a *given* repeat occurs in it. For this, =get_repeat_times(repeat_unit)= will be called recursively over all the sequences in the file to build a dictionary which contains the number of times the repeat unit occurs in each sequence.
         This can be totaled to find the repeat times
         #+begin_src python
           def repeat_times_file(fasta_dict, repeat):
               """This returns the the number of times a given repeat occurs in the file."""

               repeat
    
         #+end_src
   5. Outputs
      Outputs are placed in ./genomic-tools-gdspyt-ui.py file, where repeats.py is imported to get all the functions:
      #+begin_src python :tangle ./genomic-tools-gdspyt-ui.py
      from repeats import *
      #+end_src
      1. For a given repeat unit, we want to print the number of times it occurs in the file 
      2. We want to print the maximum occurance all repeats of length n, along with all the repeats which occur at maximum frequency. 
         =print_max_repeat(fasta_dict, n)= will print the dictionary returned by =max_occurance_n()=
         #+begin_src python
           def print_max_repeat(fasta_dict, n):
               """This function prints the maximum number of times of occurance of repeat units of lengths n and all such repeat units with occur with the maximum frequency"""

               #first we get the max repeats list by calling the max_occurance_n function. Remember that the first position of the list returned by the function contains the maximum frequency
               max_repeats_list = max_occurance_n(fasta_dict, n)

               print("The repeat of length", n, "occurs", max_repeats_list[0], "times in the file.")
               print("The following repeats occur at the maximum frequency:")
               i = 1 #because we want to print from the second position of the list
               list_len = len(max_repeats_list)
               while(i < listlen):
                   print(max_repeats_list[i])

               return 0
         #+end_src

      3. 
Hello Michael,

That I can do. If you search for repeats of length 10, there is only one (GCGCGGCGCG) repeated max times (8).

To add a little more sense to it, if you were, for example, looking for repeats of length 10 appearing max-1 times, you'd find 4 different repeats ('GCCGGCCGGC': 7, 'CGGCGGCCGG': 7, 'CGGCGTCGCG': 7, 'CGCGGCGCGG': 7)

I hope this helps, please ask if you'd like me to give you more info on these or anything else.

Best,

Dejan

